(defpoll date :interval "1s" "date '+%A, %d.%m'")
(defpoll time :interval "1s" "date '+%H:%M'")

(defpoll calendar_day :interval "20h" "date '+%d'")
(defpoll calendar_year :interval "20h" "date '+%Y'")

(defvar time_reveal false)
(defvar music_reveal false)

;; Variables used to toggle popup windows
(defvar music_popup_open false)
(defvar calendar_popup_open false)

(defpoll song-info :interval "1s" "scripts/music --info")

(deflisten workspace-info "scripts/workspaces")

(defwidget workspaces []
  (box
    :class "workspaces"
    :orientation "h"
    :space-evenly false
    (for workspace in workspace-info
      (button
        :class {workspace.active ? "active" : ""}
        :onclick "hyprctl dispatch workspace ${workspace.index}"
        (label :text {workspace.icon})
      )
    )
  )
)

(defwidget iconbtn [icon value]
  (box
    :class "icon-button"
    :orientation "h"
    :space-evenly false
    (label :text icon)
    (label :text value)
  )
)

(defwidget datetime []
  (eventbox
    :onhover "${EWW_CMD} update time_reveal=true"
    :onhoverlost "${EWW_CMD} update time_reveal=false"
    :onclick "${EWW_CONFIG_DIR}/scripts/toggle_popup calendar"
    (box
      :orientation "h"
      :space-evenly false
      :spacing "10"
      (label :text time)
      (revealer
        :transition "slideleft"
        :reveal time_reveal
        :duration "350ms"
        (iconbtn :icon "󰃭 " :value date)
      )
    )
  )
)

;; ======================================================================
;;  Music
;; ======================================================================

(defwidget music_bar []
  (eventbox
    :onhover "${EWW_CMD} update music_reveal=true"
    :onhoverlost "${EWW_CMD} update music_reveal=false"
    :onclick "${EWW_CONFIG_DIR}/scripts/toggle_popup music"
    (box
      :orientation "h"
      :space-evenly false
      :spacing "10"
      (box
        :space-evenly false
        :spacing "10"
        (provider_icon :provider {song-info.provider})
        (label :text {song-info.title})
      )
      (revealer
        :transition "slideleft"
        :reveal music_reveal
        :duration "350ms"
        (label :text " - ${song-info.artist}")
      )
    )
  )
)

(defwidget provider_icon [provider]
  (label
    :style "color: ${provider == 'spotify' ? '#1db954' : '#f7768e'};"
    :text {provider == "spotify" ? "" : "󰉌"}
  )
)

(defwindow music_win
  :monitor 0
  :geometry (geometry
    :x "20px"
    :y "1%"
    :width 428
    :height 200
    :anchor "top center"
  )
  :stacking "fg"
  (music_popup)
)

(defwidget music_popup []
  (box
    :class "music-popup"
    :orientation "h"
    :space-evenly false
    (overlay
      (box
        :class "cover"
        :width 428
        :style "background-image: url('${song-info.cover}');"
      )
      (box
        :class "provider"
        :orientation "h"
        :halign "end"
        :valign "start"
        (provider_icon :provider {song-info.provider})
      )
      (box
        :class "info"
        :orientation "v"
        :halign "start"
        :valign "center"
        :space-evenly false
        :spacing "10"
        (label :halign "start" :limit-width 30 :text {song-info.title})
        (label :halign "start" :limit-width 30 :text {song-info.artist})
      )
      (box
        :class "progress"
        :orientation "v"
        :halign "center"
        :valign "end"
        (scale
          :min 0
          :max {round(song-info.length.secs, 0)}
          :value {round(song-info.time.secs, 0)}
        )
        (label :halign "start" :text "${song-info.time.display} / ${song-info.length.display}")
      )
    )
  )
)

;; ======================================================================
;;  Calendar
;; ======================================================================

(defwindow calendar_win
  :monitor 0
  :geometry (geometry
    :x "1%"
    :y "9px"
    :anchor "top right"
    :width "270px"
  )
  (calendar_)
)

(defwidget calendar_ []
  (box :class "calendar" :orientation "v"
    (box :class "content"
      :orientation "v"
      :space-evenly false
      (label
        :class "date"
        :halign "start"
        :text date
      )
      (calendar
        :day calendar_day
        :year calendar_year
        :show-week-numbers true
      )
    )
  )
)

;; ======================================================================
;;  Window: Top status bar
;; ======================================================================

(defwindow top_bar
  :monitor 0
  :geometry (geometry
    :x "0%"
    :y "9px"
    :width "98%"
    :height "30px"
    :anchor "top center"
  )
  :exclusive true
  :stacking "fg"
  :windowtype "dock"
  (topbar)
)

(defwidget topbar []
  (centerbox
    :class "top_bar"
    :orientation "h"
    (left)
    (center)
    (right)
  )
)

(defwidget left []
  (box
    :orientation "h"
    :space-evenly false
    :halign "start"

    (workspaces)
  )
)

(defwidget center []
  (box
    :orientation "h"
    :space-evenly false
    :halign "center"

    (music_bar)
  )
)

(defwidget right []
  (box
    :orientation "h"
    :space-evenly false
    :halign "end"

    (datetime)
  )
)
