(defpoll date :interval "1s" "date '+%A, %d.%m'")
(defpoll time :interval "1s" "date '+%H:%M'")

(defvar time_reveal false)
(defvar music_reveal false)

(defpoll song-info :interval "1s" "scripts/music --info")

(deflisten workspace-info "scripts/workspaces")

(defwidget workspaces []
  (box
    :class "workspaces"
    :orientation "h"
    :space-evenly false
    (for workspace in workspace-info
      (button
        :class {workspace.active ? "active" : ""}
        :onclick "hyprctl dispatch workspace ${workspace.index}"
        (label :text {workspace.icon})
      )
    )
  )
)

(defwidget iconbtn [icon value]
  (box
    :class "icon-button"
    :orientation "h"
    :space-evenly false
    (label :text icon)
    (label :text value)
  )
)

(defwidget datetime []
  (eventbox
    :onhover "${EWW_CMD} update time_reveal=true"
    :onhoverlost "${EWW_CMD} update time_reveal=false"
    (box
      :orientation "h"
      :space-evenly false
      :spacing "10"
      (label :text time)
      (revealer
        :transition "slideleft"
        :reveal time_reveal
        :duration "350ms"
        (iconbtn :icon "󰃭 " :value date)
      )
    )
  )
)

;; ======================================================================
;;  Music
;; ======================================================================

(defwidget music_bar []
  (eventbox
    :onhover "${EWW_CMD} update music_reveal=true"
    :onhoverlost "${EWW_CMD} update music_reveal=false"
    (box
      :orientation "h"
      :space-evenly false
      :spacing "10"
      (box
        :space-evenly false
        :spacing "10"
        (provider_icon :provider {song-info.provider})
        (label :text {song-info.title})
      )
      (revealer
        :transition "slideleft"
        :reveal music_reveal
        :duration "350ms"
        (label :text " - ${song-info.artist}")
      )
    )
  )
)

(defwidget provider_icon [provider]
  (label
    :style "color: ${provider == 'spotify' ? '#1db954' : '#f7768e'};"
    :text {provider == "spotify" ? "" : "󰉌"}
  )
)

;; ======================================================================
;;  Window: Top status bar
;; ======================================================================

(defwindow top_bar
  :monitor 0
  :geometry (geometry
    :x "0%"
    :y "9px"
    :width "98%"
    :height "30px"
    :anchor "top center"
  )
  :exclusive true
  :stacking "fg"
  :windowtype "dock"
  (topbar)
)

(defwidget topbar []
  (centerbox
    :class "top_bar"
    :orientation "h"
    (left)
    (center)
    (right)
  )
)

(defwidget left []
  (box
    :orientation "h"
    :space-evenly false
    :halign "start"

    (workspaces)
  )
)

(defwidget center []
  (box
    :orientation "h"
    :space-evenly false
    :halign "center"

    (music_bar)
  )
)

(defwidget right []
  (box
    :orientation "h"
    :space-evenly false
    :halign "end"

    (datetime)
  )
)
